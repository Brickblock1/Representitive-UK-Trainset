# 1 "ruktsna.pnml"

# 1 "src/header.pnml" 1
grf{
	grfid                  : "RTNA" ;
	name                   : string(STR_GRF_NAME) ;
	desc                   : string(STR_GRF_DESC) ;
	version                : 10 ;
	min_compatible_version : 6 ;
	param 0{
		nuclear_enabled{
			type		: bool ;
			name		: string(STR_NUCLEAR_ENABLED_NAME) ;
			desc		: string(STR_NUCLEAR_ENABLED_DESC) ;
			bit			: 1 ;
			def_value	: 0 ;
		}
		narrow_gauge_enabled{
			type		: bool ;
			name		: string(STR_NARROW_GAUGE_ENABLED_NAME) ;
			desc		: string(STR_NARROW_GAUGE_ENABLED_DESC) ;
			bit			: 2 ;
			def_value	: 0 ;
		}
	}
}

//Cargo table

cargotable {
//Default cargos
   PASS, MAIL, COAL, FOOD, GOLD, GOOD, GRAI, IORE, LVST, OIL_, PAPR, STEL, VALU, WHEA, WOOD,

//Tropical cargos
   CORE, DIAM, FRUT, MAIZ, RUBR, WATR, 

//ECS
   AORE, BDMT, BRCK, CERA, CERE, CMNT, DYES, FERT, FICR, FISH, GLAS, LIME, OLSD, PETR, PLAS, POTA, RFPR, SAND, SULP, TOUR, VEHI, WDPR, WOOL, 
   
//FIRS
   BEAN, BEER, BOOM, CLAY, CASS, COKE, ENSP, EOIL, FMSP, FRVG, GRVL, IRON, METL, MNO2, MILK, MNSP, NICK, NITR, NUTS, PHOS, PIPE, PORE, QLME, RCYC, SASH, SCMT, SGBT, SGCN, SLAG, VBOD, VPTS, JAVA, COPR, SUGR, ZINC,
   
   SCRP, //Old scrap metal
   
//Nuclear stuff
	URAN, NWST
}

//Rail-type table

railtypetable {
    RAIL, 
	ELRL,
	SAA3: ["3RDR", SAA3, ELRL],
	SAAZ: ["3RDC", SAAZ, ELRL],
	SAA4: ["4RDR", SAA4, "3RDR", SAA3, ELRL],
	NAAN: [NAAN, NRGL, RAIL]
}



//Uranium cargo

spriteset(gfx_nwst_cargo_icon, "gfx/nuclear_reprocessing_site.png"){[69, 186, 10, 10, 0, 0]}


item(FEAT_CARGOS, cargo_uranium, 62){
	property{
		number                    : 62 ;
		type_name                 : string(STR_URAN_NAME) ;
		unit_name                 : string(STR_URAN_NAME) ;
		units_of_cargo            : TTD_STR_TONS ;
		items_of_cargo            : string(STR_URAN_ITEMS_OF_CARGO) ;
		type_abbreviation         : string(STR_URAN_ABBREV) ;
		sprite                    : NEW_CARGO_SPRITE ;
		weight                    : 2 ;
		penalty_lowerbound        : 30 ;
		single_penalty_length     : 2 ;
		price_factor              : 160 ;
		station_list_colour       : 205 ;
		cargo_payment_list_colour : 205 ;
		is_freight                : 1 ;
		cargo_classes             : bitmask(CC_HAZARDOUS) ;
		cargo_label               : "URAN" ;
		capacity_multiplier       : 0.5 ;
	}
	graphics{
		default : gfx_nwst_cargo_icon ;
	}
}


//Nuclear waste cargo

item(FEAT_CARGOS, cargo_nuclear_waste, 63){
	property{
		number                    : 63 ;
		type_name                 : string(STR_NWST_NAME) ;
		unit_name                 : string(STR_NWST_NAME) ;
		units_of_cargo            : TTD_STR_TONS ;
		items_of_cargo            : string(STR_NWST_ITEMS_OF_CARGO) ;
		type_abbreviation         : string(STR_NWST_ABBREV) ;
		sprite                    : NEW_CARGO_SPRITE ;
		weight                    : 2 ;
		penalty_lowerbound        : 18 ;
		single_penalty_length     : 8 ;
		price_factor              : 190 ;
		station_list_colour       : 208 ;
		cargo_payment_list_colour : 208 ;
		is_freight                : 1 ;
		cargo_classes             : bitmask(CC_HAZARDOUS) ;
		cargo_label               : "NWST" ;
		capacity_multiplier       : 0.5 ;
	}
	graphics{
		default : gfx_nwst_cargo_icon ;
	}
}


spriteset(gfx_fence_ne         , "gfx/base_tile.png"){[ 66 , 0  , 64, 40 , -31, -9  ]}
spriteset(gfx_fence_se         , "gfx/base_tile.png"){[ 66 , 41 , 64, 40 , -31, -9  ]}
spriteset(gfx_fence_sw         , "gfx/base_tile.png"){[ 0  , 41 , 64, 40 , -31, -9  ]}
spriteset(gfx_fence_nw         , "gfx/base_tile.png"){[ 0  , 0  , 64, 40 , -31, -9  ]}
spriteset(gfx_fence_e          , "gfx/base_tile.png"){[ 198, 0  , 64, 40 , -31, -9  ]}
spriteset(gfx_fence_s          , "gfx/base_tile.png"){[ 198, 41 , 64, 40 , -31, -9  ]}
spriteset(gfx_fence_w          , "gfx/base_tile.png"){[ 132, 41 , 64, 40 , -31, -9  ]}
spriteset(gfx_fence_n          , "gfx/base_tile.png"){[ 132, 0  , 64, 40 , -31, -9  ]}

switch(FEAT_INDUSTRIES, SELF, sw_nuclear_build_date_check, current_year < 1950){
	1 : CB_RESULT_IND_NO_CONSTRUCTION ;
	CB_RESULT_IND_PROBABILITY_FROM_PROPERTY ;
}

# 1 "ruktsna.pnml" 2

# 1 "src/extra_sfx.pnml" 1


switch(FEAT_TRAINS, SELF, sfx_extra, getbits(extra_callback_info1, 0, 8)){
	SOUND_EVENT_STOPPED			: sound("sfx/40_idle.wav", 80) ;	//0
	SOUND_EVENT_VISUAL_EFFECT	: sound("sfx/40_run.wav", 80) ;		//1
	SOUND_EVENT_RUNNING_16		: sound("sfx/08_idle.wav") ;		//2
	SOUND_EVENT_START			: sound("sfx/08_coast.wav") ;		//3
	SOUND_EVENT_BREAKDOWN		: sound("sfx/25_idle.wav") ;		//4
	SOUND_EVENT_TUNNEL			: sound("sfx/25_coast.wav") ;		//5
}

switch(FEAT_TRAINS, SELF, sfx_extra_1, getbits(extra_callback_info1, 0, 8)){
	SOUND_EVENT_STOPPED			: sound("sfx/25_run.wav") ;			//6
	SOUND_EVENT_VISUAL_EFFECT	: sound("sfx/60_idle.wav", 80) ;	//7
	SOUND_EVENT_RUNNING_16		: sound("sfx/60_coast.wav", 80) ;	//8
	//SOUND_EVENT_START			: sound("sfx/66_run.wav") ;			//9
	//SOUND_EVENT_BREAKDOWN		: sound("sfx/66_idle.wav") ;		//10
	//SOUND_EVENT_TUNNEL			: sound("sfx/66_coast.wav") ;		//11
}

switch(FEAT_TRAINS, SELF, sw_sfx_extra, cargo_subtype){
	1 : sfx_extra_1 ;
	sfx_extra ;
}



spriteset(gfx_sfx_extra){
	[0,0,1,1,0,0,"gfx/base_tile.png"] //North
	[0,0,1,1,0,0,"gfx/base_tile.png"] //North East
	[0,0,1,1,0,0,"gfx/base_tile.png"] //East
	[0,0,1,1,0,0,"gfx/base_tile.png"] //South East
	[0,0,1,1,0,0,"gfx/base_tile.png"] //South
	[0,0,1,1,0,0,"gfx/base_tile.png"] //South West
	[0,0,1,1,0,0,"gfx/base_tile.png"] //West
	[0,0,1,1,0,0,"gfx/base_tile.png"] //North West
}

item(FEAT_TRAINS, item_sfx_extra, 0){
	property{
		name                           : string(STR_NWST_NAME) ;  
		climates_available             : NO_CLIMATE ;
		introduction_date              : date(1,1,1) ;
		refit_cost                     : 1 ;
		refittable_cargo_classes       : 0 ;
		model_life                     : 1 ;
		vehicle_life                   : 1 ;
		reliability_decay              : 1 ;
		cost_factor                    : 1 ;
		running_cost_base              : RUNNING_COST_DIESEL ;
		running_cost_factor            : 1 ;
		speed                          : 1 mph ;
		track_type                     : RAIL ;
		power                          : 1 kW ;
		weight                         : 1 ton ;
		engine_class                   : ENGINE_CLASS_DIESEL ;
		tractive_effort_coefficient    : 0.8 ;
		air_drag_coefficient           : 0.01 ;
		length                         : 1 ;
		effect_spawn_model_and_powered : EFFECT_SPAWN_MODEL_DIESEL ;
		sprite_id                      : SPRITE_ID_NEW_TRAIN ;
		dual_headed                    : 0 ;
	}
	graphics{
		default                        : gfx_sfx_extra ;
		sound_effect                   : sw_sfx_extra ;
	}
}
# 1 "ruktsna.pnml" 2
# 1 "src/extra_gfx.pnml" 1
//template_x_y where x is length and y is no. views

template template_purchase(x,y){
	[ x, y, 79, 12, -39, -6]
}

template template_purchase_short(x,y){
	[ x, y, 55, 12, -39, -6]
}

template base_32bpp(){
	[0,0,1,1,0,0,"gfx/blank.png"] //North
	[0,0,1,1,0,0,"gfx/blank.png"] //North East
	[0,0,1,1,0,0,"gfx/blank.png"] //East
	[0,0,1,1,0,0,"gfx/blank.png"] //South East
	[0,0,1,1,0,0,"gfx/blank.png"] //South
	[0,0,1,1,0,0,"gfx/blank.png"] //South West
	[0,0,1,1,0,0,"gfx/blank.png"] //West
	[0,0,1,1,0,0,"gfx/blank.png"] //North West
}

spriteset(gfx_blank){base_32bpp()}

template template_narrow_4_4(x, y){
	[x+000, y  ,  8 , 14 , -3 , -11] //North
	[x+010, y  , 12 , 13 , -5 , -9 ] //North East
	[x+024, y  , 17 , 13 , -0 , -9 ] //East
	[x+043, y  , 12 , 13 ,  3 , -5 ] //South East
	[x+000, y  ,  8 , 14 , -3 , -4 ] //South
	[x+010, y  , 12 , 13 , -13, -5 ] //South West
	[x+024, y  , 17 , 13 , -17, -9 ] //West
	[x+043, y  , 12 , 13 , -5 , -9 ] //North West
}

template template_narrow_4_8(x, y){
	[x+000, y  ,  8 , 14 , -3 , -11] //North
	[x+010, y  , 12 , 13 , -5 , -9 ] //North East
	[x+024, y  , 17 , 13 , -0 , -9 ] //East
	[x+043, y  , 12 , 13 ,  3 , -5 ] //South East
	[x+057, y  ,  8 , 14 , -3 , -4 ] //South
	[x+067, y  , 12 , 13 , -13, -5 ] //South West
	[x+081, y  , 17 , 13 , -17, -9 ] //West
	[x+100, y  , 12 , 13 , -5 , -9 ] //North West
}





template template_dualhead_purchase(x,y){
	[ x+77, y+11, 1, 1, 0, 0]
	[ x+77, y+11, 1, 1, 0, 0]
	[ x, y, 78, 12, -54, -6]
	[ x+77, y+11, 1, 1, 0, 0]
	[ x+77, y+11, 1, 1, 0, 0]
	[ x+77, y+11, 1, 1, 0, 0]
	[ x+77, y+11, 1, 1, 0, 0]
}

template template_uklight(x,y){
	[x+0,y,8,24,-3,-11] //North
	[x+10,y,20,16,-14,-8] //North East
	[x+32,y,32,13,-16,-9] //East
	[x+66,y,20,16,-4,-8] //South East
	[x+88,y,8,24,-3,-11] //South
	[x+98,y,20,16,-14,-8] //South West
	[x+120,y,32,13,-16,-9] //West
	[x+154,y,20,16,-4,-8] //North West
}

template template_uklight_reverse(x,y){
	[x+88,y,8,24,-3,-11] //South
	[x+98,y,20,16,-14,-8] //South West
	[x+120,y,32,13,-16,-9] //West
	[x+154,y,20,16,-4,-8] //North West
	[x+0,y,8,24,-3,-11] //North
	[x+10,y,20,16,-14,-8] //North East
	[x+32,y,32,13,-16,-9] //East
	[x+66,y,20,16,-4,-8] //South East
}

template template_5_4(x,y){
	[x+000,  y ,  8 , 16 , -3 , -7 ] //North
	[x+010,  y , 14 , 14 , -14, -5 ] //North East
	[x+026,  y , 21 , 13 , -18, -8 ] //East
	[x+049,  y , 14 , 14 , -7 , -10] //South East
	[x+000,  y ,  8 , 16 , -3 , -7 ] //North
	[x+010,  y , 14 , 14 , -14, -5 ] //North East
	[x+026,  y , 21 , 13 , -18, -8 ] //East
	[x+049,  y , 14 , 14 , -7 , -10] //South East
}

template template_5_8(x,y){
	[x+000,  y ,  8 , 16 , -3 , -11] //North
	[x+010,  y , 14 , 14 , -7 , -9 ] //North East
	[x+026,  y , 21 , 13 , -5 , -9 ] //East
	[x+049,  y , 14 , 14 ,  1 , -6 ] //South East
	[x+065,  y ,  8 , 16 , -3 , -5 ] //South     
	[x+075,  y , 14 , 14 , -13, -6 ] //South West
	[x+091,  y , 21 , 13 , -17, -9 ] //West      
	[x+114,  y , 14 , 14 , -5 , -9 ] //North West
}

template template_5_8_rev(x,y){
	[x+065,  y ,  8 , 16 , -3 , -11] //South     
	[x+075,  y , 14 , 14 , -7 , -9 ] //South West
	[x+091,  y , 21 , 13 , -5 , -9 ] //West      
	[x+114,  y , 14 , 14 ,  1 , -6 ] //North West
	[x+000,  y ,  8 , 16 , -3 , -5 ] //North
	[x+010,  y , 14 , 14 , -13, -6 ] //North East
	[x+026,  y , 21 , 13 , -17, -9 ] //East
	[x+049,  y , 14 , 14 , -5 , -9 ] //South East
}

template template_8_8(x,y){
    [ x, y, 8, 24, -3, -12]
    [ x+10, y, 21, 17, -12, -10]
    [ x+33, y, 32, 12, -16, -8]
    [ x+67, y, 21, 17, -5, -10]
    [ x+90, y, 8, 24, -3, -12]
    [ x+100, y, 21, 17, -12, -10]
    [ x+123, y, 32, 12, -16, -8]
    [ x+157, y, 21, 17, -5, -10]
}

template template_8_4(x,y){
    [ x, y, 8, 24, -3, -12]
    [ x+10, y, 21, 17, -12, -10]
    [ x+33, y, 32, 12, -16, -8]
    [ x+67, y, 21, 17, -5, -10]
}

template template_7_8(x,y){
    [ x, y, 8, 22, -3, -11]
    [ x+10, y, 19, 17, -11, -10]
    [ x+31, y, 28, 12, -14, -8]
    [ x+61, y, 19, 17, -4, -9]
    [ x+82, y, 8, 22, -3, -11]
    [ x+92, y, 19, 17, -11, -10]
    [ x+113, y, 28, 12, -14, -8]
    [ x+143, y, 19, 17, -4, -9]
}

template template_7_4(x,y){
    [ x, y, 8, 22, -3, -11]
    [ x+10, y, 19, 17, -11, -10]
    [ x+31, y, 28, 12, -14, -8]
    [ x+61, y, 19, 17, -4, -9]
}

template template_8_8_networker(x,y){
    [ x, y, 8, 24, -3, -12]
    [ x+10, y, 21, 18, -13, -10]
    [ x+33, y, 32, 12, -16, -8]
    [ x+67, y, 21, 18, -6, -10]
    [ x+90, y, 8, 24, -3, -12]
    [ x+100, y, 21, 18, -13, -10]
    [ x+123, y, 32, 12, -16, -8]
    [ x+157, y, 21, 18, -6, -10]
}

template template_8_8_networker_reverse(x,y){
    [ x+90, y, 8, 24, -3, -12]
    [ x+100, y, 21, 18, -13, -10]
    [ x+123, y, 32, 12, -16, -8]
    [ x+157, y, 21, 18, -6, -10]
    [ x, y, 8, 24, -3, -12]
    [ x+10, y, 21, 18, -13, -10]
    [ x+33, y, 32, 12, -16, -8]
    [ x+67, y, 21, 18, -6, -10]
}

template template_8_4_networker(x,y){
    [ x, y, 8, 24, -3, -12]
    [ x+10, y, 21, 18, -13, -10]
    [ x+33, y, 32, 12, -16, -8]
    [ x+67, y, 21, 18, -6, -10]
}
switch (FEAT_TRAINS, SELF, vfx_mhle, [STORE_TEMP(create_effect(EFFECT_SPRITE_ELECTRIC, 0, 0, 10), 0x100)]) {
    return 1;
}

switch (FEAT_TRAINS, SELF, vfx_3rd, [STORE_TEMP(create_effect(EFFECT_SPRITE_ELECTRIC, 0, 0, -7), 0x100)]) {
    return 1;
}

switch (FEAT_TRAINS, SELF, vfx_diesel_default, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 10), 0x100)]) {
    return 1;
}

switch(FEAT_TRAINS, SELF, vfx_dual_voltage, current_railtype){
	SAA3: vfx_3rd;
	vfx_mhle;
}

switch(FEAT_TRAINS, SELF, vfx_3rd_mnly, current_railtype){
	SAA3: vfx_3rd;
	return 0;
}

switch(FEAT_TRAINS, SELF, vfx_mhle_mnly, current_railtype){
	ELRL: vfx_mhle;
	SAAZ: vfx_mhle;
	return 0;
}

switch(FEAT_TRAINS, SELF, vfx_steam, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 0, 0, 10), 0x100)]) {
    return 1;
}
//Sound deciding switches

/*

Rule of thumb: 4.5 m/s = 10 Mph = 16 Km/h
Game will take these numbers in m/s
To work out speed do 4.5 * (Speed in Mph / 10)

*/


spriteset(spriteset_456_nse_f, "gfx/class_508.png") {template_8_8_networker(718, 100)}
spriteset(spriteset_456_nse_r, "gfx/class_508.png") {template_8_8_networker(718, 125)}
spriteset(spriteset_456_nse_m, "gfx/class_508.png") {template_8_8_networker(718, 150)}

spriteset(spriteset_456_cnx_f, "gfx/class_508.png") {template_8_8_networker(718, 200)}
spriteset(spriteset_456_cnx_r, "gfx/class_508.png") {template_8_8_networker(718, 225)}
spriteset(spriteset_456_cnx_m, "gfx/class_508.png") {template_8_8_networker(718, 250)}

spriteset(spriteset_456_stn_f, "gfx/class_508.png") {template_8_8_networker(718, 300)}
spriteset(spriteset_456_stn_r, "gfx/class_508.png") {template_8_8_networker(718, 325)}
spriteset(spriteset_456_stn_m, "gfx/class_508.png") {template_8_8_networker(718, 350)}

spriteset(spriteset_456_swt_f, "gfx/class_508.png") {template_8_8_networker(718, 400)}
spriteset(spriteset_456_swt_r, "gfx/class_508.png") {template_8_8_networker(718, 425)}
spriteset(spriteset_456_swt_m, "gfx/class_508.png") {template_8_8_networker(718, 450)}

switch(FEAT_TRAINS, SELF, sw_456_nse_f, position_in_consist){0: spriteset_456_nse_f; spriteset_456_nse_m;}
switch(FEAT_TRAINS, SELF, sw_456_nse, position_in_consist_from_end){0: spriteset_456_nse_r; sw_456_nse_f;}

switch(FEAT_TRAINS, SELF, sw_456_cnx_f, position_in_consist){0: spriteset_456_cnx_f; spriteset_456_cnx_m;}
switch(FEAT_TRAINS, SELF, sw_456_cnx, position_in_consist_from_end){0: spriteset_456_cnx_r; sw_456_cnx_f;}

switch(FEAT_TRAINS, SELF, sw_456_stn_f, position_in_consist){0: spriteset_456_stn_f; spriteset_456_stn_m;}
switch(FEAT_TRAINS, SELF, sw_456_stn, position_in_consist_from_end){0: spriteset_456_stn_r; sw_456_stn_f;}

switch(FEAT_TRAINS, SELF, sw_456_swt_f, position_in_consist){0: spriteset_456_swt_f; spriteset_456_swt_m;}
switch(FEAT_TRAINS, SELF, sw_456_swt, position_in_consist_from_end){0: spriteset_456_swt_r; sw_456_swt_f;}

switch(FEAT_TRAINS, SELF, sw_456_refit_text, cargo_subtype){
	0: return string(STR_LIVERY_NSE);
	1: return string(STR_LIVERY_CONNEX);
	2: return string(STR_LIVERY_SOUTHERN);
	3: return string(STR_LIVERY_SWT);
	4: return string(STR_LIVERY_NSE);
	5: return string(STR_LIVERY_CONNEX);
	6: return string(STR_LIVERY_SOUTHERN);
	7: return string(STR_LIVERY_SWT);
	return CB_RESULT_NO_TEXT ;
}

switch(FEAT_TRAINS, SELF, sw_456_default, cargo_subtype){
	0: sw_456_nse;
	1: sw_456_cnx;
	2: sw_456_stn;
	3: sw_456_swt;
	4: sw_456_nse;
	5: sw_456_cnx;
	6: sw_456_stn;
	7: sw_456_swt;
}

random_switch(FEAT_TRAINS, SELF, sw_455_nse_colour_mapping, TRIGGER_VEHICLE_SERVICE){
	1: palette_2cc(COLOUR_DARK_BLUE, COLOUR_RED) ;
 }
 
random_switch(FEAT_TRAINS, SELF, sw_455_swt_colour_mapping, TRIGGER_VEHICLE_SERVICE){ 
	1 : palette_2cc(COLOUR_RED, COLOUR_DARK_BLUE) ;
}

random_switch(FEAT_TRAINS, SELF, sw_455_se_colour_mapping, TRIGGER_VEHICLE_SERVICE){  
	1 : palette_2cc(COLOUR_DARK_BLUE, COLOUR_YELLOW);
}

random_switch(FEAT_TRAINS, SELF, sw_455_stn_colour_mapping, TRIGGER_VEHICLE_SERVICE){ 
	1 : palette_2cc(COLOUR_DARK_GREEN, COLOUR_DARK_GREEN) ;
}

switch(FEAT_TRAINS, SELF, sw_455_manual_livery_decider, cargo_subtype){
	0: sw_455_nse_colour_mapping;
	1: sw_455_se_colour_mapping;
	2: sw_455_stn_colour_mapping;
	3: sw_455_swt_colour_mapping;
	4 .. 7: palette_2cc(company_colour1, company_colour2);
}

item (FEAT_TRAINS, item_456, 456) {
	property {
		name: 							string(STR_NAME_456);
		climates_available: 			ALL_CLIMATES;
		introduction_date:				date(1990, 1, 1);
		model_life:						30;
		retire_early:					1;
		vehicle_life:					50;
		reliability_decay:				7;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS);
		cargo_allow_refit:				[PASS, TOUR];
		loading_speed:					38;
		cost_factor:					43;
		running_cost_factor:			30;
		sprite_id:						SPRITE_ID_NEW_TRAIN;
		speed:							75 mph;
		misc_flags:						bitmask(TRAIN_FLAG_MU, TRAIN_FLAG_2CC);
		refit_cost:						0;
		track_type:						SAA3;
		ai_special_flag:				AI_FLAG_CARGO;
		power:							500 hp;
		running_cost_base:				RUNNING_COST_ELECTRIC;
		dual_headed:					1;
		default_cargo_type:				PASS;
		cargo_capacity:					75;
		weight:							35 ton;
		engine_class:					ENGINE_CLASS_ELECTRIC;
		tractive_effort_coefficient:	0.85;
		air_drag_coefficient:			0.32;
		length:							8;
		effect_spawn_model_and_powered:	EFFECT_SPAWN_MODEL_ELECTRIC;
		bitmask_vehicle_info:			0;
		cargo_age_period:				185;
		default_cargo_type:				PASS;
	}
	graphics {
	default: 							sw_456_default;
	create_effect:						vfx_3rd_mnly;
	cargo_subtype_text:					sw_456_refit_text ;
	colour_mapping:						sw_455_manual_livery_decider ;
	//sound_effect:						sw_sfx_electric_networker;
}
}


spriteset(spriteset_458_lr, "gfx/class_458.png") {template_8_8_networker(0, 0)}
spriteset(spriteset_458_lf, "gfx/class_458.png") {template_8_8_networker(0, 25)}
spriteset(spriteset_458_f, "gfx/class_458.png") {template_8_8_networker(0, 50)}
spriteset(spriteset_458_m, "gfx/class_458.png") {template_8_8_networker(0, 75)}

switch(FEAT_TRAINS, SELF, sw_electrostar_headlights_1, position_in_consist){
0: spriteset_458_lf;
gfx_blank;
}

switch(FEAT_TRAINS, SELF, sw_electrostar_headlights, position_in_consist_from_end){
0: spriteset_458_lr;
sw_electrostar_headlights_1;
}

switch(FEAT_TRAINS, SELF, sw_458gfx, position_in_articulated_veh){
0: spriteset_458_f;
4: spriteset_458_f;
spriteset_458_m;
}

switch(FEAT_TRAINS, SELF, sw_458_default, [STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100), getbits(extra_callback_info1, 8, 8)]){
	0: return sw_458gfx;
	1: return sw_electrostar_headlights;
}

switch (FEAT_TRAINS, SELF, switch_articulated_BR350, extra_callback_info1) {
	1..3: return item_458;
	4: return (item_458 | CB_RESULT_REVERSED_VEHICLE);
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS; //stop adding vehicle parts
}


item (FEAT_TRAINS, item_458, 458) {
	property {
		name: 							string(STR_NAME_458);
		climates_available: 			ALL_CLIMATES;
		introduction_date:				date(1999, 1, 1);
		model_life:						30;
		retire_early:					1;
		vehicle_life:					50;
		reliability_decay:				7;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS);
		cargo_allow_refit:				[PASS, TOUR];
		loading_speed:					30;
		cost_factor:					43;
		running_cost_factor:			30;
		sprite_id:						SPRITE_ID_NEW_TRAIN;
		speed:							75 mph;
		misc_flags:						bitmask(TRAIN_FLAG_MU, TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
		refit_cost:						0;
		track_type:						SAA3;
		ai_special_flag:				AI_FLAG_CARGO;
		power:							434 hp;
		running_cost_base:				RUNNING_COST_ELECTRIC;
		dual_headed:					0;
		default_cargo_type:				PASS;
		cargo_capacity:					60;
		weight:							45 ton;
		engine_class:					ENGINE_CLASS_ELECTRIC;
		tractive_effort_coefficient:	0.09;
		air_drag_coefficient:			0.06;
		length:							8;
		effect_spawn_model_and_powered:	EFFECT_SPAWN_MODEL_ELECTRIC;
		bitmask_vehicle_info:			0;
		cargo_age_period:				185;
		default_cargo_type:				PASS;
	}
	graphics {
	default: 							sw_458_default;
	create_effect:						vfx_3rd_mnly;
	colour_mapping:						palette_2cc(COLOUR_DARK_BLUE, COLOUR_RED) ;
		articulated_part:					switch_articulated_BR350;
}
}


spriteset(spriteset_378_lr, "gfx/networker19.png") {template_8_8_networker(456, 163)}
spriteset(spriteset_378_lf, "gfx/networker19.png") {template_8_8_networker(456, 138)}
spriteset(spriteset_378_f, "gfx/networker19.png") {template_8_8_networker(456, 88)}
spriteset(spriteset_378_m, "gfx/networker19.png") {template_8_8_networker(456, 113)}

switch(FEAT_TRAINS, SELF, sw_capitalstar_headlights_1, position_in_consist){
0: spriteset_378_lf;
gfx_blank;
}

switch(FEAT_TRAINS, SELF, sw_capitalstar_headlights, position_in_consist_from_end){
0: spriteset_378_lr;
sw_capitalstar_headlights_1;
}

switch(FEAT_TRAINS, SELF, sw_3785gfx, position_in_articulated_veh){
0: spriteset_378_f;
4: spriteset_378_f;
spriteset_378_m;
}

switch(FEAT_TRAINS, SELF, sw_3784gfx, position_in_articulated_veh){
0: spriteset_378_f;
3: spriteset_378_f;
spriteset_378_m;
}

switch(FEAT_TRAINS, SELF, sw_3783gfx, position_in_articulated_veh){
0: spriteset_378_f;
2: spriteset_378_f;
spriteset_378_m;
}

switch(FEAT_TRAINS, SELF, sw_3783_default, [STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100), getbits(extra_callback_info1, 8, 8)]){
	0: return sw_3783gfx;
	1: return sw_capitalstar_headlights;
}

switch(FEAT_TRAINS, SELF, sw_3784_default, [STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100), getbits(extra_callback_info1, 8, 8)]){
	0: return sw_3784gfx;
	1: return sw_capitalstar_headlights;
}

switch(FEAT_TRAINS, SELF, sw_3785_default, [STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100), getbits(extra_callback_info1, 8, 8)]){
	0: return sw_3785gfx;
	1: return sw_capitalstar_headlights;
}

switch (FEAT_TRAINS, SELF, switch_articulated_BR3783, extra_callback_info1) {
	1: return item_3783;
	2: return (item_3783 | CB_RESULT_REVERSED_VEHICLE);
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS; //stop adding vehicle parts
}

switch (FEAT_TRAINS, SELF, switch_articulated_BR3784, extra_callback_info1) {
	1..2: return item_3784;
	3: return (item_3784 | CB_RESULT_REVERSED_VEHICLE);
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS; //stop adding vehicle parts
}

switch (FEAT_TRAINS, SELF, switch_articulated_BR3785, extra_callback_info1) {
	1..3: return item_378;
	4: return (item_378 | CB_RESULT_REVERSED_VEHICLE);
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS; //stop adding vehicle parts
}

item (FEAT_TRAINS, item_378, 378) {
	property {
		name: 							string(STR_NAME_378_5);
		climates_available: 			ALL_CLIMATES;
		introduction_date:				date(2007, 1, 1);
		model_life:						30;
		retire_early:					1;
		vehicle_life:					50;
		reliability_decay:				7;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS);
		cargo_allow_refit:				[PASS, TOUR];
		loading_speed:					50;
		cost_factor:					43;
		running_cost_factor:			30;
		sprite_id:						SPRITE_ID_NEW_TRAIN;
		speed:							75 mph;
		misc_flags:						bitmask(TRAIN_FLAG_MU, TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
		refit_cost:						0;
		track_type:						SAAZ;
		ai_special_flag:				AI_FLAG_CARGO;
		power:							500 hp;
		running_cost_base:				RUNNING_COST_ELECTRIC;
		dual_headed:					0;
		default_cargo_type:				PASS;
		cargo_capacity:					150;
		weight:							45 ton;
		engine_class:					ENGINE_CLASS_ELECTRIC;
		tractive_effort_coefficient:	0.4;
		air_drag_coefficient:			0.06;
		length:							8;
		effect_spawn_model_and_powered:	EFFECT_SPAWN_MODEL_ELECTRIC;
		bitmask_vehicle_info:			0;
		cargo_age_period:				185;
		default_cargo_type:				PASS;
	}
	graphics {
	default: 							sw_3785_default;
	create_effect:						vfx_3rd_mnly;
	colour_mapping:						palette_2cc(COLOUR_DARK_BLUE, COLOUR_RED) ;
		articulated_part:					switch_articulated_BR3785;
}
}

item (FEAT_TRAINS, item_3784, 3784) {
	property {
		name: 							string(STR_NAME_378_4);
		climates_available: 			ALL_CLIMATES;
		introduction_date:				date(2007, 1, 1);
		model_life:						30;
		retire_early:					1;
		vehicle_life:					50;
		reliability_decay:				7;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS);
		cargo_allow_refit:				[PASS, TOUR];
		loading_speed:					50;
		cost_factor:					43;
		running_cost_factor:			30;
		sprite_id:						SPRITE_ID_NEW_TRAIN;
		speed:							75 mph;
		misc_flags:						bitmask(TRAIN_FLAG_MU, TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
		refit_cost:						0;
		track_type:						SAAZ;
		ai_special_flag:				AI_FLAG_CARGO;
		power:							500 hp;
		running_cost_base:				RUNNING_COST_ELECTRIC;
		dual_headed:					0;
		default_cargo_type:				PASS;
		cargo_capacity:					150;
		weight:							45 ton;
		engine_class:					ENGINE_CLASS_ELECTRIC;
		tractive_effort_coefficient:	0.4;
		air_drag_coefficient:			0.06;
		length:							8;
		effect_spawn_model_and_powered:	EFFECT_SPAWN_MODEL_ELECTRIC;
		bitmask_vehicle_info:			0;
		cargo_age_period:				185;
		default_cargo_type:				PASS;
	}
	graphics {
	default: 							sw_3784_default;
	create_effect:						vfx_3rd_mnly;
	colour_mapping:						palette_2cc(COLOUR_DARK_BLUE, COLOUR_RED) ;
		articulated_part:					switch_articulated_BR3784;
}
}

item (FEAT_TRAINS, item_3783, 3783) {
	property {
		name: 							string(STR_NAME_378_3);
		climates_available: 			ALL_CLIMATES;
		introduction_date:				date(2007, 1, 1);
		model_life:						30;
		retire_early:					1;
		vehicle_life:					50;
		reliability_decay:				7;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS);
		cargo_allow_refit:				[PASS, TOUR];
		loading_speed:					50;
		cost_factor:					43;
		running_cost_factor:			30;
		sprite_id:						SPRITE_ID_NEW_TRAIN;
		speed:							75 mph;
		misc_flags:						bitmask(TRAIN_FLAG_MU, TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
		refit_cost:						0;
		track_type:						SAAZ;
		ai_special_flag:				AI_FLAG_CARGO;
		power:							500 hp;
		running_cost_base:				RUNNING_COST_ELECTRIC;
		dual_headed:					0;
		default_cargo_type:				PASS;
		cargo_capacity:					150;
		weight:							45 ton;
		engine_class:					ENGINE_CLASS_ELECTRIC;
		tractive_effort_coefficient:	0.4;
		air_drag_coefficient:			0.06;
		length:							8;
		effect_spawn_model_and_powered:	EFFECT_SPAWN_MODEL_ELECTRIC;
		bitmask_vehicle_info:			0;
		cargo_age_period:				185;
		default_cargo_type:				PASS;
	}
	graphics {
	default: 							sw_3783_default;
	create_effect:						vfx_3rd_mnly;
	colour_mapping:						palette_2cc(COLOUR_DARK_BLUE, COLOUR_RED) ;
		articulated_part:					switch_articulated_BR3783;
}
}
# 1 "ruktsna.pnml" 2

# 1 "src/narrow_gauge.pnml" 1
//Narrow Gauge Tracks

//Graphics

spriteset(gfx_narrow_track, "gfx/narrow_gauge.png"){
	[ 0  , 72 , 40 , 21 , -19,  5  ] //North East
	[ 50 , 72 , 40 , 21 , -19,  5  ] //North West
	[ 100, 72 , 40 , 7  , -19,  4  ] //Horizontal Top
	[ 150, 72 , 40 , 7  , -19, 20  ] //Horizontal Bottom
	[ 200, 72 , 12 , 19 , 11 ,  6  ] //Vertical Right
	[ 224, 72 , 12 , 19 , -21,  6  ] //Vertical Left
	[ 259, 72 , 36 , 27 , -17, -2  ] //Slope NE
	[ 342, 72 , 37 , 12 , -18,  6  ] //Slope SE
	[ 383, 72 , 37 , 12 , -19,  6  ] //Slope SW
	[ 299, 72 , 36 , 27 , -17, -2  ] //Slope NW
}

spriteset(gfx_narrow_trackbed, "gfx/narrow_gauge.png"){
	[ 0  , 72 , 40 , 21 , -19,  5  ] //North East
	[ 50 , 72 , 40 , 21 , -19,  5  ] //North West
	[ 100, 72 , 40 , 7  , -19,  4  ] //Horizontal Top
	[ 150, 72 , 40 , 7  , -19, 20  ] //Horizontal Bottom
	[ 200, 72 , 12 , 19 , 11 ,  6  ] //Vertical Right
	[ 224, 72 , 12 , 19 , -21,  6  ] //Vertical Left
	[ 259, 72 , 36 , 27 , -17, -2  ] //Slope NE
	[ 342, 72 , 37 , 12 , -18,  6  ] //Slope SE
	[ 383, 72 , 37 , 12 , -19,  6  ] //Slope SW
	[ 299, 72 , 36 , 27 , -17, -2  ] //Slope NW
	[ 40 , 98 , 40 , 21 , -19, 5   ] //Cross over
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
}

spriteset(gfx_narrow_bridges, "gfx/narrow_gauge.png"){
	[ 0  , 72 , 40 , 21 , -19,  5  ] //North East
	[ 50 , 72 , 40 , 21 , -19,  5  ] //North West
	[ 259, 72 , 36 , 27 , -17, -2  ] //Slope NE
	[ 342, 72 , 37 , 12 , -18,  6  ] //Slope SE
	[ 383, 72 , 37 , 12 , -19,  6  ] //Slope SW
	[ 299, 72 , 36 , 27 , -17, -2  ] //Slope NW
	[ 40 , 98 , 40 , 21 , -19, 5   ] //Cross over
}

spriteset(gfx_narrow_tunnels, "gfx/narrow_gauge.png"){
	[ 0  , 72 , 40 , 21 , -19,  5  ] //North East
	[ 50 , 72 , 40 , 21 , -19,  5  ] //North West
	[ 0  , 72 , 40 , 21 , -19,  5  ] //North East
	[ 50 , 72 , 40 , 21 , -19,  5  ] //North West
}

spriteset(gfx_narrow_level_crossing, "gfx/narrow_gauge.png"){
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
	[ 0  , 72 , 1  , 1  , 0  , 0   ] 
}

/*
spriteset(gfx_narrow_track_diag_y, "gfx/TRACKS/narrow_gauge.png"){}
spriteset(gfx_narrow_track_hori_s, "gfx/TRACKS/narrow_gauge.png"){}
spriteset(gfx_narrow_track_hori_n, "gfx/TRACKS/narrow_gauge.png"){}
spriteset(gfx_narrow_track_vert_l, "gfx/TRACKS/narrow_gauge.png"){}
spriteset(gfx_narrow_track_vert_r, "gfx/TRACKS/narrow_gauge.png"){}
*/


if(narrow_gauge_enabled == 1){
item(FEAT_RAILTYPES, narrow_rail, 5) {
	property {
		label                     : "NAAN" ;
		name                      : string(STR_NAAN_NAME) ;
		menu_text                 : string(STR_NAAN_NAME) ;
		build_window_caption      : string(STR_NAAN_BUILD_NAME) ;
		autoreplace_text          : string(STR_NAAN_REPLACE_NAME) ;
		new_engine_text           : string(STR_NAAN_NEW_TRAIN) ;
		compatible_railtype_list  : ["NAAN", "NRGL"] ;
		powered_railtype_list     : ["NAAN", "NRGL"] ;
		curve_speed_multiplier    : 1 ;
		station_graphics          : RAILTYPE_STATION_NORMAL ;
		construction_cost         : 40 ;
		speed_limit               : 50 mph ;
		acceleration_model        : ACC_MODEL_RAIL ;
		railtype_flags            : bitmask(RAILTYPE_FLAG_NO_LEVEL_CROSSING) ;
		//introduction_date         : date(1869,1,1) ;
	}
	graphics {
		track_overlay   : gfx_narrow_track ;
		underlay        : gfx_narrow_trackbed ;
		bridge_surfaces : gfx_narrow_bridges ;
		tunnels         : gfx_narrow_tunnels ;
		level_crossings : gfx_narrow_level_crossing ;
		//depots          : 
		//fences          : 
	}
}
}
# 1 "ruktsna.pnml" 2

# 1 "src/nuclear_site.pnml" 1
//Graphics

spriteset(gfx_nucrep_empty_tile         , "gfx/nuclear_reprocessing_site.png"){[ 0  , 208, 64, 40 , -31, -9  ]}
spriteset(gfx_nucrep_empty_tile_loaded  , "gfx/nuclear_reprocessing_site.png"){[ 66 , 208, 64, 40 , -31, -10 ]}
spriteset(gfx_nucrep_forklift           , "gfx/nuclear_reprocessing_site.png"){[ 156, 124, 64, 41 , -31, -9  ]}
spriteset(gfx_nucrep_forklift_loaded    , "gfx/nuclear_reprocessing_site.png"){[ 156, 167, 64, 41 , -31, -10 ]}
spriteset(gfx_nucrep_overpass           , "gfx/nuclear_reprocessing_site.png"){[ 69 , 124, 85, 60 , -31, -29 ]}
spriteset(gfx_nucrep_shed               , "gfx/nuclear_reprocessing_site.png"){[ 0  , 155, 67, 51 , -32, -20 ]}
spriteset(gfx_nucrep_sphere_tank        , "gfx/nuclear_reprocessing_site.png"){[ 66 , 58 , 64, 64 , -31, -33 ]}
spriteset(gfx_nucrep_road_overlay       , "gfx/nuclear_reprocessing_site.png"){[ 111, 0  , 96, 47 , -31, -16 ]}
spriteset(gfx_nucrep_cooling_tower      , "gfx/nuclear_reprocessing_site.png"){[ 66 , 0  , 43, 56 , -21, -32 ]}
spriteset(gfx_nucrep_chimney_building_1 , "gfx/nuclear_reprocessing_site.png"){[ 342, 110, 64, 138, -31, -107]}
spriteset(gfx_nucrep_chimney_building_2 , "gfx/nuclear_reprocessing_site.png"){[ 408, 110, 64, 138, -31, -107]}
spriteset(gfx_nucrep_chimney_building_3 , "gfx/nuclear_reprocessing_site.png"){[ 474, 110, 64, 138, -31, -107]}
spriteset(gfx_nucrep_chimney_building_4 , "gfx/nuclear_reprocessing_site.png"){[ 540, 110, 64, 138, -31, -107]}
spriteset(gfx_nucrep_generic_building   , "gfx/nuclear_reprocessing_site.png"){[ 0  , 87 , 64, 66 , -31, -35 ]}


//Sprite layouts

switch(FEAT_INDUSTRYTILES, SELF, sw_nucrep_container_colour_check, current_year){ 1960..1995 : palette_1cc(COLOUR_YELLOW) ; palette_1cc(COLOUR_WHITE) ; }

spritelayout spritelayout_cooling_tower {
	ground { sprite : gfx_fence_nw ; }
	building { sprite : gfx_nucrep_cooling_tower ; }
}

spritelayout spritelayout_empty_tile {
	ground { sprite : gfx_nucrep_empty_tile ; }
	//building { sprite : gfx_nucrep_empty_tile ; }
}

spritelayout spritelayout_empty_tile_cargo {
	ground { sprite : gfx_nucrep_empty_tile ; }
	building { sprite : gfx_nucrep_empty_tile_loaded ; recolour_mode : RECOLOUR_REMAP ; palette : palette_1cc(COLOUR_YELLOW) ; }
}

spritelayout spritelayout_forklift {
	ground { sprite : gfx_nucrep_empty_tile ; }
	building { sprite : gfx_nucrep_forklift ; }
}

spritelayout spritelayout_forklift_cargo {
	ground { sprite : gfx_nucrep_empty_tile ; }
	building { sprite : gfx_nucrep_forklift_loaded ; recolour_mode : RECOLOUR_REMAP ; palette : palette_1cc(COLOUR_YELLOW) ; }
}

spritelayout spritelayout_overpass {
	ground { sprite : gfx_nucrep_empty_tile ; }
	building { sprite : gfx_nucrep_overpass ; }
}

spritelayout spritelayout_shed {
	ground { sprite : gfx_nucrep_empty_tile ; }
	building { sprite : gfx_nucrep_shed ; recolour_mode : RECOLOUR_REMAP ; palette : palette_1cc(COLOUR_YELLOW) ; }
}

spritelayout spritelayout_sphere_tank {
	ground { sprite : gfx_fence_ne ; }
	building { sprite : gfx_nucrep_sphere_tank ; }
}

spritelayout spritelayout_road_overlay {
	ground { sprite : gfx_nucrep_road_overlay ; }
	//building { sprite : gfx_nucrep_road_overlay ; }
}

spritelayout spritelayout_chimney_building_1 {
	ground { sprite : gfx_nucrep_empty_tile ; }
	building { sprite : gfx_nucrep_chimney_building_1 ; }
}

spritelayout spritelayout_chimney_building_2 {
	ground { sprite : gfx_nucrep_empty_tile ; }
	building { sprite : gfx_nucrep_chimney_building_2 ; }
}

spritelayout spritelayout_chimney_building_3 {
	ground { sprite : gfx_nucrep_empty_tile ; }
	building { sprite : gfx_nucrep_chimney_building_3 ; }
}

spritelayout spritelayout_chimney_building_4 {
	ground { sprite : gfx_nucrep_empty_tile ; }
	building { sprite : gfx_nucrep_chimney_building_4 ; }
}

spritelayout spritelayout_generic_building {
	ground { sprite : gfx_nucrep_empty_tile ; }
	building { sprite : gfx_nucrep_generic_building ; }
}

spritelayout spritelayout_nucrep_empty_e  { ground { sprite : gfx_fence_e  ; } }
spritelayout spritelayout_nucrep_empty_se { ground { sprite : gfx_fence_se ; } }
spritelayout spritelayout_nucrep_empty_s  { ground { sprite : gfx_fence_s  ; } }
spritelayout spritelayout_nucrep_empty_sw { ground { sprite : gfx_fence_sw ; } }
spritelayout spritelayout_nucrep_empty_w  { ground { sprite : gfx_fence_w  ; } }
spritelayout spritelayout_nucrep_empty_nw { ground { sprite : gfx_fence_nw ; } }



//Sprite layout switches

switch(FEAT_INDUSTRYTILES, PARENT, sw_nucrep_empty_cargo_decider, waiting_cargo_1 > 0){
	1 : spritelayout_empty_tile_cargo ;
	spritelayout_empty_tile ;
}

switch(FEAT_INDUSTRYTILES, PARENT, sw_nucrep_forklift_cargo_decider, waiting_cargo_1 > 0){
	1 : spritelayout_forklift_cargo ;
	spritelayout_forklift ;
}

switch(FEAT_INDUSTRYTILES, SELF, sw_nucrep_chimney_animation_decider, animation_frame){
	0 : spritelayout_chimney_building_1 ;
	1 : spritelayout_chimney_building_2 ;
	2 : spritelayout_chimney_building_3 ;
	spritelayout_chimney_building_4 ;
}



//Tile graphics decider

switch(FEAT_INDUSTRYTILES, SELF, nucrep_tile_gfx_decider, relative_pos){
	relative_coord(0,0) : spritelayout_cooling_tower ;
	relative_coord(0,1) : spritelayout_sphere_tank ;
	relative_coord(0,2) : spritelayout_generic_building ;
	relative_coord(0,3) : spritelayout_generic_building ;
	relative_coord(0,4) : spritelayout_generic_building ;
	relative_coord(0,5) : spritelayout_sphere_tank ;
	relative_coord(0,6) : spritelayout_nucrep_empty_e ;
	
	relative_coord(1,0) : spritelayout_cooling_tower ;
	relative_coord(1,1) : spritelayout_shed ;
	relative_coord(1,2) : spritelayout_shed ;
	relative_coord(1,3) : spritelayout_shed ;
	relative_coord(1,4) : spritelayout_shed ;
	relative_coord(1,5) : sw_nucrep_forklift_cargo_decider ;
	relative_coord(1,6) : spritelayout_nucrep_empty_se ;
	
	//Skip a row
	
	relative_coord(3,0) : spritelayout_cooling_tower ;
	relative_coord(3,1) : spritelayout_chimney_building_1 ;
	relative_coord(3,2) : sw_nucrep_forklift_cargo_decider ;
	relative_coord(3,3) : spritelayout_overpass ;
	relative_coord(3,4) : sw_nucrep_empty_cargo_decider ;
	relative_coord(3,5) : sw_nucrep_empty_cargo_decider ;
	relative_coord(3,6) : spritelayout_nucrep_empty_se ;
	
	relative_coord(4,0) : spritelayout_cooling_tower ;
	relative_coord(4,1) : spritelayout_chimney_building_1 ;
	relative_coord(4,2) : sw_nucrep_empty_cargo_decider ;
	relative_coord(4,3) : spritelayout_shed ;
	relative_coord(4,4) : spritelayout_chimney_building_1 ;
	relative_coord(4,5) : sw_nucrep_forklift_cargo_decider ;
	relative_coord(4,6) : spritelayout_nucrep_empty_se ;
	
	relative_coord(5,0) : spritelayout_nucrep_empty_w ;
	relative_coord(5,1) : spritelayout_nucrep_empty_sw ;
	relative_coord(5,2) : spritelayout_nucrep_empty_sw ;
	relative_coord(5,3) : spritelayout_nucrep_empty_sw ;
	relative_coord(5,4) : spritelayout_nucrep_empty_sw ;
	relative_coord(5,5) : spritelayout_nucrep_empty_sw ;
	relative_coord(5,6) : spritelayout_nucrep_empty_s ;
}

switch(FEAT_INDUSTRYTILES, SELF, nucrep_tile_gfx_decider_2, relative_pos){
	relative_coord(0,0) : spritelayout_cooling_tower ;
	relative_coord(0,1) : spritelayout_generic_building ;
	relative_coord(0,2) : spritelayout_generic_building ;
	relative_coord(0,3) : spritelayout_generic_building ;
	relative_coord(0,4) : spritelayout_nucrep_empty_e ;
	
	relative_coord(1,0) : spritelayout_cooling_tower ;
	relative_coord(1,1) : spritelayout_sphere_tank ;
	relative_coord(1,2) : spritelayout_chimney_building_1 ;
	relative_coord(1,3) : sw_nucrep_empty_cargo_decider ;
	relative_coord(1,4) : spritelayout_nucrep_empty_se ;
	
	relative_coord(2,0) : spritelayout_nucrep_empty_nw ;
	relative_coord(2,1) : sw_nucrep_forklift_cargo_decider ;
	relative_coord(2,2) : sw_nucrep_empty_cargo_decider ;
	relative_coord(2,3) : spritelayout_overpass ;
	relative_coord(2,4) : spritelayout_nucrep_empty_se ;
	
	//Skip a row
	
	relative_coord(4,0) : spritelayout_shed ;
	relative_coord(4,1) : spritelayout_shed ;
	relative_coord(4,2) : sw_nucrep_empty_cargo_decider ;
	relative_coord(4,3) : spritelayout_overpass ;
	relative_coord(4,4) : spritelayout_nucrep_empty_se ;
	
	relative_coord(5,0) : spritelayout_shed ;
	relative_coord(5,1) : spritelayout_shed ;
	relative_coord(5,2) : spritelayout_chimney_building_1 ;
	relative_coord(5,3) : sw_nucrep_empty_cargo_decider ;
	relative_coord(5,4) : spritelayout_nucrep_empty_se ;
	
	relative_coord(6,0) : spritelayout_nucrep_empty_w ;
	relative_coord(6,1) : spritelayout_nucrep_empty_sw ;
	relative_coord(6,2) : spritelayout_nucrep_empty_sw ;
	relative_coord(6,3) : spritelayout_nucrep_empty_sw ;
	relative_coord(6,4) : spritelayout_nucrep_empty_s ;
}


//Industry tiles

item(FEAT_INDUSTRYTILES, nucrep_tile){
	property{
		substitute       : 0 ;
		accepted_cargos  : [[NWST, 8]] ;
		land_shape_flags : bitmask(LSF_ONLY_ON_FLAT_LAND) ;
	}
	graphics{
		default : nucrep_tile_gfx_decider ;
	}
}

item(FEAT_INDUSTRYTILES, nucrep_tile_2){
	property{
		substitute       : 0 ;
		accepted_cargos  : [[NWST, 8]] ;
		land_shape_flags : bitmask(LSF_ONLY_ON_FLAT_LAND) ;
	}
	graphics{
		default : nucrep_tile_gfx_decider_2 ;
	}
}

/*
item(FEAT_INDUSTRYTILES, nucrep_cooling_tower){
	property{
		substitute         : 0 ;
		accepted_cargos    : [] ;
		land_shape_flags   : bitmask(LSF_ONLY_ON_FLAT_LAND) ;
	}
	graphics{
		default      : nucrep_tile_gfx_decider ;
	}
}
*/

switch (FEAT_INDUSTRYTILES, SELF, nucrep_chimney_animation, animation_frame) {
	0..2 : CB_RESULT_NEXT_FRAME ;
	return 0 ;
}

item(FEAT_INDUSTRYTILES, nucrep_chimney){
	property{
		substitute       : 0x07 ;
		accepted_cargos  : [[NWST, 8]] ;
		land_shape_flags : bitmask(LSF_ONLY_ON_FLAT_LAND) ;
		animation_info     : [ANIMATION_LOOPING, 4] ;
		animation_speed    : 2 ;
		animation_triggers : bitmask(ANIM_TRIGGER_INDTILE_TILE_LOOP) ;
	}
	graphics{
		default         : sw_nucrep_chimney_animation_decider ;
		anim_next_frame : nucrep_chimney_animation ;
		//anim_control    : CB_RESULT_START_ANIMATION ;
	}
}


//Tile layout

/*tilelayout tilelayout_nucrep_site_big{
	0,0 : nucrep_tile ;
	0,1 : nucrep_tile ;
	0,2 : nucrep_tile ;
	0,3 : nucrep_tile ;

	1,0 : nucrep_tile ;
	1,1 : nucrep_tile ;
	1,2 : nucrep_tile ;
	1,3 : nucrep_tile ;

	3,0 : nucrep_tile ;
	3,1 : nucrep_chimney ;  //chimney
	3,2 : nucrep_tile ;
	3,3 : nucrep_tile ;
      
	4,0 : nucrep_tile ;
	4,1 : nucrep_chimney ; //chimney
	4,2 : nucrep_tile ;
	4,3 : nucrep_tile ;
	  
	6,0 : nucrep_tile ;
	6,1 : nucrep_tile ;
	6,2 : nucrep_tile ;
	6,3 : nucrep_tile ;
}*/

tilelayout tilelayout_nucrep_site_a{
	0,0 : nucrep_tile ;
	0,1 : nucrep_tile ;
	0,2 : nucrep_tile ;
	0,3 : nucrep_tile ;
	0,4 : nucrep_tile ;
	0,5 : nucrep_tile ;
	0,6 : nucrep_tile ;

	1,0 : nucrep_tile ;
	1,1 : nucrep_tile ;
	1,2 : nucrep_tile ;
	1,3 : nucrep_tile ;
	1,4 : nucrep_tile ;
	1,5 : nucrep_tile ;
	1,6 : nucrep_tile ;

	3,0 : nucrep_tile ;
	3,1 : nucrep_chimney ; //chimney
	3,2 : nucrep_tile ;
	3,3 : nucrep_tile ;
	3,4 : nucrep_tile ;
	3,5 : nucrep_tile ;
	3,6 : nucrep_tile ;
      
	4,0 : nucrep_tile ;
	4,1 : nucrep_chimney ; //chimney
	4,2 : nucrep_tile ;
	4,3 : nucrep_tile ;
	4,4 : nucrep_chimney ; //chimney
	4,5 : nucrep_tile ;
	4,6 : nucrep_tile ;
	
	5,0 : nucrep_tile ;
	5,1 : nucrep_tile ; //chimney
	5,2 : nucrep_tile ;
	5,3 : nucrep_tile ;
	5,4 : nucrep_tile ;
	5,5 : nucrep_tile ;
	5,6 : nucrep_tile ;
}

tilelayout tilelayout_nucrep_site_b{
	0,0 : nucrep_tile_2 ;
	0,1 : nucrep_tile_2 ;
	0,2 : nucrep_tile_2 ;
	0,3 : nucrep_tile_2 ;
	0,4 : nucrep_tile_2 ;

	1,0 : nucrep_tile_2 ;
	1,1 : nucrep_tile_2 ;
	1,2 : nucrep_chimney ;
	1,3 : nucrep_tile_2 ;
	1,4 : nucrep_tile_2 ;

	2,0 : nucrep_tile_2 ;
	2,1 : nucrep_tile_2 ;
	2,2 : nucrep_tile_2 ;
	2,3 : nucrep_tile_2 ;
	2,4 : nucrep_tile_2 ;

	4,0 : nucrep_tile_2 ;
	4,1 : nucrep_tile_2 ;
	4,2 : nucrep_tile_2 ;
	4,3 : nucrep_tile_2 ;
	4,4 : nucrep_tile_2 ;

	5,0 : nucrep_tile_2 ;
	5,1 : nucrep_tile_2 ;
	5,2 : nucrep_chimney ;
	5,3 : nucrep_tile_2 ;
	5,4 : nucrep_tile_2 ;

	6,0 : nucrep_tile_2 ;
	6,1 : nucrep_tile_2 ;
	6,2 : nucrep_tile_2 ;
	6,3 : nucrep_tile_2 ;
	6,4 : nucrep_tile_2 ;
}

 /* Every month, the counter is increased. The counter is reset to zero whenever the power plant
    receives cargo. When the counter reaches 61, the industry will close when the random production
    change callback is called. 
 
 // When we receive cargo, the counter is reset. 
 produce(nucrep_cargo_arrive_produce, 0, 0, 0, 0, STORE_PERM(0, 0x00));
 
 // Every month the counter is increased. 
 switch (FEAT_INDUSTRIES, SELF, sw_nucrep_monthly_prod_change_switch, STORE_PERM(LOAD_PERM(0x00) + 1, 0x00)) {
 	return CB_RESULT_IND_PROD_NO_CHANGE;
 }
 
 /* switch (FEAT_INDUSTRIES, SELF, sw_nucrep_monthly_prod_change_check, waiting_cargo_1){
	0 : sw_nucrep_monthly_prod_change_switch ;
	CB_RESULT_IND_PROD_NO_CHANGE ;
 } 
 
 // Only check industry closure if the counter is greater than 60. 
 switch (FEAT_INDUSTRIES, SELF, sw_nucrep_random_prod_change_switch, LOAD_PERM(0x00)) {
 	0..60: return CB_RESULT_IND_PROD_NO_CHANGE;
 	return CB_RESULT_IND_PROD_CLOSE;
 }
/*
switch (FEAT_INDUSTRIES, SELF, sw_nucrep_water_check, water_distance){
	0..32 : CB_RESULT_LOCATION_ALLOW ;
	return string(STR_ERROR_NOT_NEAR_WATER) ;
}*/

produce(nucrep_produce_monthly, 5, 0, 0, 0, 0);

if(nuclear_enabled == 1){
item(FEAT_INDUSTRIES, nuclear_reprocessing_site){
	property {
		substitute            : 0x01 ;
		layouts               : [tilelayout_nucrep_site_a, tilelayout_nucrep_site_b] ;
		life_type             : IND_LIFE_TYPE_BLACK_HOLE ;
		fund_cost_multiplier  : 255 ;
		prod_cargo_types      : [] ;
		accept_cargo_types    : [cargotype("NWST")] ;
		prob_map_gen          : 3 ;
		prob_in_game          : 1 ;
		map_colour            : 208 ;
		new_ind_msg           : TTD_STR_NEWS_INDUSTRY_CONSTRUCTION ;
		name                  : string(STR_NUCPROC_NAME) ;
		nearby_station_name   : string(STR_NUCPROC_STATION_NAME) ;
		//conflicting_ind_types : [industry_type(IND_TYPE_OLD, 0x01), industry_type(IND_TYPE_NEW, 0), industry_type(IND_TYPE_NEW, 1)] ;
		//spec_flags            : bitmask(IND_FLAG_BUILT_ONLY_AFTER_1960) ;
	}
	/*graphics {
		produce_cargo_arrival		: nucrep_cargo_arrive_produce ;
		//produce_256_ticks			: nucrep_produce_monthly ;
		//location_check				: sw_nucrep_water_check ;
		monthly_prod_change			: sw_nucrep_monthly_prod_change_switch ;
		random_prod_change			: sw_nucrep_random_prod_change_switch ;
		construction_probability	: sw_nuclear_build_date_check ;
		//colour                : sw_nucrep_colour_check ;
	}*/
}
}
# 1 "ruktsna.pnml" 2
# 1 "src/power_station.pnml" 1
//Graphics

template template_btrsea(x, y){ [ x  , y  , 64 , 122, -31 , -91] }

spriteset(gfx_btrsea_1_0       , "gfx/battersea_power_station.png"){ template_btrsea( 0  , 0  ) }
spriteset(gfx_btrsea_2_0       , "gfx/battersea_power_station.png"){ template_btrsea( 65 , 0  ) }
spriteset(gfx_btrsea_3_0       , "gfx/battersea_power_station.png"){ [ 130, 0  , 64 , 122, -33 , -92] }
spriteset(gfx_btrsea_1_1       , "gfx/battersea_power_station.png"){ template_btrsea( 195, 0  ) }
spriteset(gfx_btrsea_2_1       , "gfx/battersea_power_station.png"){ template_btrsea( 260, 0  ) }
spriteset(gfx_btrsea_3_1       , "gfx/battersea_power_station.png"){ template_btrsea( 325, 0  ) }

spriteset(gfx_btrsea_3_0_pig_1 , "gfx/battersea_power_station.png"){ [ 0  , 123, 71 , 134, -33 , -104] }
spriteset(gfx_btrsea_3_0_pig_2 , "gfx/battersea_power_station.png"){ [ 72 , 123, 71 , 134, -33 , -104] }
spriteset(gfx_btrsea_3_0_pig_3 , "gfx/battersea_power_station.png"){ [ 144, 123, 71 , 134, -33 , -104] }
spriteset(gfx_btrsea_3_0_pig_4 , "gfx/battersea_power_station.png"){ [ 216, 123, 71 , 134, -33 , -104] }

spriteset(gfx_btrsea_1_0_1     , "gfx/battersea_power_station.png"){ [ 0  , 258, 92 , 147, -31 , -116] }  
spriteset(gfx_btrsea_1_0_2     , "gfx/battersea_power_station.png"){ [ 93 , 258, 92 , 147, -31 , -116] }  
spriteset(gfx_btrsea_1_0_3     , "gfx/battersea_power_station.png"){ [ 186, 258, 92 , 147, -31 , -116] }  
spriteset(gfx_btrsea_1_0_4     , "gfx/battersea_power_station.png"){ [ 279, 258, 92 , 147, -31 , -116] }  

spriteset(gfx_btrsea_3_0_1     , "gfx/battersea_power_station.png"){ [ 0  , 406, 72 , 135, -33 , -105] }
spriteset(gfx_btrsea_3_0_2     , "gfx/battersea_power_station.png"){ [ 73 , 406, 72 , 135, -33 , -105] }
spriteset(gfx_btrsea_3_0_3     , "gfx/battersea_power_station.png"){ [ 146, 406, 72 , 135, -33 , -105] }
spriteset(gfx_btrsea_3_0_4     , "gfx/battersea_power_station.png"){ [ 219, 406, 72 , 135, -33 , -105] }

spriteset(gfx_btrsea_1_1_1     , "gfx/battersea_power_station.png"){ [ 0  , 542, 84 , 152, -31 , -121] }  
spriteset(gfx_btrsea_1_1_2     , "gfx/battersea_power_station.png"){ [ 85 , 542, 84 , 152, -31 , -121] }    
spriteset(gfx_btrsea_1_1_3     , "gfx/battersea_power_station.png"){ [ 170, 542, 84 , 152, -31 , -121] }    
spriteset(gfx_btrsea_1_1_4     , "gfx/battersea_power_station.png"){ [ 255, 542, 84 , 152, -31 , -121] }    

spriteset(gfx_btrsea_3_1_1     , "gfx/battersea_power_station.png"){ [ 0  , 695, 64 , 140, -31 , -109] }  
spriteset(gfx_btrsea_3_1_2     , "gfx/battersea_power_station.png"){ [ 65 , 695, 64 , 140, -31 , -109] }    
spriteset(gfx_btrsea_3_1_3     , "gfx/battersea_power_station.png"){ [ 130, 695, 64 , 140, -31 , -109] }    
spriteset(gfx_btrsea_3_1_4     , "gfx/battersea_power_station.png"){ [ 195, 695, 64 , 140, -31 , -109] }    

spriteset(gfx_btrsea_coal_med  , "gfx/battersea_power_station.png"){ [ 390, 0  , 64 , 34 , -31 , -3  ] } 
spriteset(gfx_btrsea_coal_full , "gfx/battersea_power_station.png"){ [ 455, 0  , 64 , 34 , -31 , -3  ] } 
spriteset(gfx_btrsea_tank      , "gfx/battersea_power_station.png"){ [ 390 , 35, 64 , 44 , -31 , -13 ] } 



//Sprite layouts

spritelayout spritelayout_btrsea_1_0   	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_1_0 ;       zextent : 80 ;} }
spritelayout spritelayout_btrsea_1_0_1 	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_1_0_1 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_1_0_2 	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_1_0_2 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_1_0_3 	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_1_0_3 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_1_0_4 	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_1_0_4 ;     zextent : 80 ;} }

spritelayout spritelayout_btrsea_2_0 	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_2_0 ;       zextent : 80 ;} }

spritelayout spritelayout_btrsea_3_0 	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_0 ;       zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_0_1	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_0_1 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_0_2	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_0_2 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_0_3	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_0_3 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_0_4	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_0_4 ;     zextent : 80 ;} }

spritelayout spritelayout_btrsea_1_1 	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_1_1 ;       zextent : 80 ;} }
spritelayout spritelayout_btrsea_1_1_1	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_1_1_1 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_1_1_2	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_1_1_2 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_1_1_3	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_1_1_3 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_1_1_4	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_1_1_4 ;     zextent : 80 ;} }

spritelayout spritelayout_btrsea_2_1	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_2_1 ;       zextent : 80 ;} }

spritelayout spritelayout_btrsea_3_1 	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_1 ;       zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_1_1	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_1_1 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_1_2	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_1_2 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_1_3	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_1_3 ;     zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_1_4	   { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_1_4 ;     zextent : 80 ;} }
	
spritelayout spritelayout_btrsea_3_0_pig_1 { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_0_pig_1 ; zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_0_pig_2 { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_0_pig_2 ; zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_0_pig_3 { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_0_pig_3 ; zextent : 80 ;} }
spritelayout spritelayout_btrsea_3_0_pig_4 { ground { sprite : gfx_nucrep_empty_tile ; } building { sprite : gfx_btrsea_3_0_pig_4 ; zextent : 80 ;} }

spritelayout spritelayout_btrsea_coal_empty  { ground { sprite : gfx_fence_ne ; } }
spritelayout spritelayout_btrsea_coal_med  { ground { sprite : gfx_fence_ne ; } building { sprite : gfx_btrsea_coal_med ; } }
spritelayout spritelayout_btrsea_coal_full { ground { sprite : gfx_fence_ne ; } building { sprite : gfx_btrsea_coal_full ; } }
spritelayout spritelayout_btrsea_tank      { ground { sprite : gfx_fence_n ; } building { sprite : gfx_btrsea_tank ; } }


spritelayout spritelayout_btrsea_4_0 { ground { sprite : gfx_fence_w  ; } }
spritelayout spritelayout_btrsea_4_1 { ground { sprite : gfx_fence_sw ; } }
spritelayout spritelayout_btrsea_0_2 { ground { sprite : gfx_fence_e  ; } }
spritelayout spritelayout_btrsea_1_2 { ground { sprite : gfx_fence_se ; } }
spritelayout spritelayout_btrsea_4_2 { ground { sprite : gfx_fence_s  ; } }
//Tiles

//Base



switch(FEAT_INDUSTRYTILES, SELF, btrsea_empty_gfx_decider, relative_pos){
	relative_coord(4,0) : spritelayout_btrsea_4_0 ;
	relative_coord(4,1) : spritelayout_btrsea_4_1 ;
	relative_coord(0,2) : spritelayout_btrsea_0_2 ;
	relative_coord(1,2) : spritelayout_btrsea_1_2 ;
	relative_coord(2,2) : spritelayout_btrsea_1_2 ;
	relative_coord(3,2) : spritelayout_btrsea_1_2 ;
	relative_coord(4,2) : spritelayout_btrsea_4_2 ;
}


//Animations

switch(FEAT_INDUSTRYTILES, SELF, sw_btrsea_pig_animation, animation_frame){
	0 : spritelayout_btrsea_3_0_pig_1 ;
	1 : spritelayout_btrsea_3_0_pig_2 ;
	2 : spritelayout_btrsea_3_0_pig_3 ;
	spritelayout_btrsea_3_0_pig_4 ;
}

switch(FEAT_INDUSTRYTILES, SELF, sw_btrsea_1_0_animation, animation_frame){
	0 : spritelayout_btrsea_1_0_1 ;
	1 : spritelayout_btrsea_1_0_2 ;
	2 : spritelayout_btrsea_1_0_3 ;
	spritelayout_btrsea_1_0_4 ;
}

switch(FEAT_INDUSTRYTILES, SELF, sw_btrsea_3_0_animation, animation_frame){
	0 : spritelayout_btrsea_3_0_1 ;
	1 : spritelayout_btrsea_3_0_2 ;
	2 : spritelayout_btrsea_3_0_3 ;
	spritelayout_btrsea_3_0_4 ;
}

switch(FEAT_INDUSTRYTILES, SELF, sw_btrsea_1_1_animation, animation_frame){
	0 : spritelayout_btrsea_1_1_1 ;
	1 : spritelayout_btrsea_1_1_2 ;
	2 : spritelayout_btrsea_1_1_3 ;
	spritelayout_btrsea_1_1_4 ;
}

switch(FEAT_INDUSTRYTILES, SELF, sw_btrsea_3_1_animation, animation_frame){
	0 : spritelayout_btrsea_3_1_1 ;
	1 : spritelayout_btrsea_3_1_2 ;
	2 : spritelayout_btrsea_3_1_3 ;
	spritelayout_btrsea_3_1_4 ;
}


//Without pig

switch(FEAT_INDUSTRYTILES, SELF, btrsea_chimney_gfx_non_animated, relative_pos){
	relative_coord(1, 0) : spritelayout_btrsea_1_0 ;
	relative_coord(3, 0) : spritelayout_btrsea_3_0 ;
	relative_coord(1, 1) : spritelayout_btrsea_1_1 ;
	relative_coord(3, 1) : spritelayout_btrsea_3_1 ;
	spritelayout_btrsea_1_0 ;
}

switch(FEAT_INDUSTRYTILES, SELF, btrsea_chimney_gfx_animated, relative_pos){
	relative_coord(1, 0) : sw_btrsea_1_0_animation ;
	relative_coord(3, 0) : sw_btrsea_3_0_animation ;
	relative_coord(1, 1) : spritelayout_btrsea_1_1 ;
	relative_coord(3, 1) : sw_btrsea_3_1_animation ;
	sw_btrsea_1_0_animation ;
}

switch(FEAT_INDUSTRYTILES, PARENT, btrsea_chimney_gfx_decider, waiting_cargo_1 + waiting_cargo_2){
	0 : btrsea_chimney_gfx_non_animated ;
	btrsea_chimney_gfx_animated ;
}


//With pig

switch(FEAT_INDUSTRYTILES, SELF, btrsea_chimney_gfx_non_animated_pig, relative_pos){
	relative_coord(1, 0) : spritelayout_btrsea_1_0 ;
	relative_coord(3, 0) : sw_btrsea_pig_animation ;
	relative_coord(1, 1) : spritelayout_btrsea_1_1 ;
	relative_coord(3, 1) : spritelayout_btrsea_3_1 ;
	spritelayout_btrsea_1_0 ;
}

switch(FEAT_INDUSTRYTILES, SELF, btrsea_chimney_gfx_animated_pig, relative_pos){
	relative_coord(1, 0) : sw_btrsea_1_0_animation ;
	relative_coord(3, 0) : sw_btrsea_pig_animation ;
	relative_coord(1, 1) : spritelayout_btrsea_1_1 ;
	relative_coord(3, 1) : sw_btrsea_3_1_animation ;
	sw_btrsea_1_0_animation ;
}

switch(FEAT_INDUSTRYTILES, PARENT, btrsea_chimney_gfx_decider_pig, waiting_cargo_1 + waiting_cargo_2){
	0 : btrsea_chimney_gfx_non_animated_pig ;
	btrsea_chimney_gfx_animated_pig ;
}



//Pig check

random_switch(FEAT_INDUSTRYTILES, SELF, btrsea_chimney_random_pig_check){
	2 : btrsea_chimney_gfx_decider ;
	1 : btrsea_chimney_gfx_decider_pig ;
}



item(FEAT_INDUSTRYTILES, btrsea_chimney_tile){
	property{
		substitute         : 0x07 ;
		accepted_cargos    : [] ;
		land_shape_flags   : bitmask(LSF_ONLY_ON_FLAT_LAND) ;
		animation_info     : [ANIMATION_LOOPING, 4] ;
		animation_speed    : 2 ;
		animation_triggers : bitmask(ANIM_TRIGGER_INDTILE_TILE_LOOP) ;
	}
	graphics{
		default         : btrsea_chimney_random_pig_check ;
		anim_next_frame : nucrep_chimney_animation ;
	}
}


item(FEAT_INDUSTRYTILES, btrsea_empty){
	property{
		substitute         : 0x08 ;
		accepted_cargos    : [] ;
		land_shape_flags   : bitmask(LSF_ONLY_ON_FLAT_LAND) ;
	}
	graphics{
		default         : btrsea_empty_gfx_decider ;
	}
}



switch(FEAT_INDUSTRYTILES, PARENT, sw_btrsea_coal_decider, waiting_cargo_1){
	1..250     : spritelayout_btrsea_coal_med ;
	250..65536 : spritelayout_btrsea_coal_full ;
	spritelayout_btrsea_coal_empty ;
}

switch(FEAT_INDUSTRYTILES, SELF, btrsea_building_gfx_decider, relative_pos){
	relative_coord(0, 0) : spritelayout_btrsea_tank ;
	relative_coord(0, 1) : sw_btrsea_coal_decider ;
	relative_coord(2, 0) : spritelayout_btrsea_2_0 ;
	relative_coord(2, 1) : spritelayout_btrsea_2_1 ;
	spritelayout_btrsea_1_1 ;
}

item (FEAT_INDUSTRYTILES, btrsea_building_tile){
	property{
		substitute       : 0x08 ;
		accepted_cargos  : [[COAL, 8],[OIL_, 8],[URAN, 8]] ;
		land_shape_flags : bitmask(LSF_ONLY_ON_FLAT_LAND) ;
	}
	graphics{
		default    : btrsea_building_gfx_decider ;
	}
}


//Tile layout

tilelayout btrsea_tilelayout {
	0, 0 : btrsea_building_tile ;
	1, 0 : btrsea_chimney_tile ;
	2, 0 : btrsea_building_tile ;
	3, 0 : btrsea_chimney_tile ;
	4, 0 : btrsea_empty ;
	0, 1 : btrsea_building_tile ;
	1, 1 : btrsea_chimney_tile ;
	2, 1 : btrsea_building_tile ;
	3, 1 : btrsea_chimney_tile ;
	4, 1 : btrsea_empty ;
	0, 2 : btrsea_empty ;
	1, 2 : btrsea_empty ;
	2, 2 : btrsea_empty ;
	3, 2 : btrsea_empty ;
	4, 2 : btrsea_empty ;
}


/*produce(produce_btrsea_none   , 68 , 68 , 4 , 0 , 0);
produce(produce_btrsea_low    , 60 , 60 , 6, 4 , 0);
produce(produce_btrsea_medium , 52 , 52 , 9, 6 , 0);
produce(produce_btrsea_high   , 48 , 48 , 15, 8, 0);
produce(produce_btrsea_arrival, 150, 150, 15 ,9 , 0);

switch(FEAT_INDUSTRIES, SELF, sw_btrsea_produce, waiting_cargo_3){
	0       : produce_btrsea_none ;
	1..40   : produce_btrsea_low ;
	41..80  : produce_btrsea_medium ;
	produce_btrsea_high ;
}*/

if(nuclear_enabled == 1){
item(FEAT_INDUSTRIES, btrsea_power_station){
	property {
		substitute            : 0x01 ;
		layouts               : [btrsea_tilelayout] ;
		life_type             : IND_LIFE_TYPE_PROCESSING ;
		accept_cargo_types    : [cargotype("COAL"), cargotype("OIL_"), cargotype("URAN")];
		prod_cargo_types      : [cargotype("NWST")] ;
		min_cargo_distr       : 10;
		spec_flags            : bitmask(IND_FLAG_CAN_CAUSE_SUBSIDENCE) ;
		nearby_station_name   : string(STR_POWER_STATION_STATION_NAME) ;
		prob_map_gen          : 4 ;
		prob_in_game          : 1 ;
		//prod_multiplier       : [1];
		//input_multiplier_1	  : [0];
		//input_multiplier_2	  : [0];
		//input_multiplier_3	  : [2];
		//conflicting_ind_types : [industry_type(IND_TYPE_OLD, 0x01), industry_type(IND_TYPE_NEW, 0), industry_type(IND_TYPE_NEW, 1)] ;
	}	
	//graphics {
		//produce_cargo_arrival : produce_btrsea_arrival ;
		//produce_256_ticks     : sw_btrsea_produce ;
	//}
}
}
# 1 "ruktsna.pnml" 2
# 1 "src/uranium_mine.pnml" 1
//Uranium mine

spriteset(gfx_uran_mine_shaft_1				, "gfx/uran_mine.png"){[ 264,   0,  64, 122, -32, -89]}
spriteset(gfx_uran_mine_shaft_2				, "gfx/uran_mine.png"){[ 334,   0,  64, 122, -32, -89]}
spriteset(gfx_uran_mine_shaft_3				, "gfx/uran_mine.png"){[ 404,   0,  64, 122, -32, -89]}
spriteset(gfx_uran_mine_building_1			, "gfx/uran_mine.png"){[ 132,   0,  64, 122, -58, -81]}
spriteset(gfx_uran_mine_building_2			, "gfx/uran_mine.png"){[ 198,   0,  64, 122, -31, -74]}
spriteset(gfx_uran_mine_chimney_building	, "gfx/uran_mine.png"){[ 0  ,   0,  64, 85 , -31, -54]}
spriteset(gfx_uran_mine_sphere_tank			, "gfx/uran_mine.png"){[ 66 , 58 ,  64, 64 , -31, -33]}
spriteset(gfx_uran_mine_shed				, "gfx/uran_mine.png"){[ 0  , 155,  67, 51 , -32, -20]}
spriteset(gfx_uran_mine_empty_tile			, "gfx/uran_mine.png"){[ 0  , 208,  64, 40 , -31,  -9]}


//Sprite layouts

// 0, 0
spritelayout spritelayout_uran_mine_shaft_1 {
	ground {	sprite : gfx_fence_n ; }
	building {	sprite : gfx_uran_mine_shaft_1 ; }
}

spritelayout spritelayout_uran_mine_shaft_2 {
	ground {	sprite : gfx_fence_n ; }
	building {	sprite : gfx_uran_mine_shaft_2 ; }
}

spritelayout spritelayout_uran_mine_shaft_3 {
	ground {	sprite : gfx_fence_n ; }
	building {	sprite : gfx_uran_mine_shaft_3 ; }
}

// 0, 1
spritelayout spritelayout_uran_mine_building_1 {
	ground {	sprite : gfx_fence_ne ; }
	building {	sprite : gfx_uran_mine_building_2 ; }
}
// 1, 1
spritelayout spritelayout_uran_mine_building_2 {
	ground {	sprite : gfx_uran_mine_empty_tile ; }
	building {	sprite : gfx_uran_mine_building_1 ; }
}


// 0, 2
spritelayout spritelayout_uran_mine_chimeny_building {
	ground {	sprite : gfx_fence_e ; }
	building {	sprite : gfx_uran_mine_chimney_building ; }
}

// 1, 0
spritelayout spritelayout_uran_mine_tank {
	ground {	sprite : gfx_fence_nw ; }
	building {	sprite : gfx_uran_mine_sphere_tank ; }
}

// 2, 0
spritelayout spritelayout_uran_mine_shed {
	ground {	sprite : gfx_uran_mine_empty_tile ; }
	building {	sprite : gfx_uran_mine_shed ; }
}

// 1, 2
spritelayout spritelayout_uran_mine_1_2 {
	ground {	sprite : gfx_fence_se ; }
}

// 2, 2
spritelayout spritelayout_uran_mine_2_2 {
	ground {	sprite : gfx_fence_s ; }
	building {	sprite : gfx_fence_s ; }
}



//Switches

switch(FEAT_INDUSTRYTILES, SELF, sw_uran_mine_gfx_decider, relative_pos){
	relative_coord(1,0) : spritelayout_uran_mine_tank ;
	relative_coord(2,0) : spritelayout_uran_mine_shed ;
	relative_coord(0,1) : spritelayout_uran_mine_building_1 ;
	relative_coord(1,1) : spritelayout_uran_mine_building_2 ;
	relative_coord(2,1) : spritelayout_uran_mine_shed ;
	relative_coord(0,2) : spritelayout_uran_mine_chimeny_building ;
	relative_coord(1,2) : spritelayout_uran_mine_1_2 ;
	relative_coord(2,2) : spritelayout_uran_mine_2_2 ;
}

switch(FEAT_INDUSTRYTILES, SELF, sw_uran_mine_shaft_animation, animation_frame){
	1 : spritelayout_uran_mine_shaft_2 ;
	2 : spritelayout_uran_mine_shaft_3 ;
	4 : spritelayout_uran_mine_shaft_2 ;
	5 : spritelayout_uran_mine_shaft_3 ;
	spritelayout_uran_mine_shaft_1 ;
}


//Tiles

item(FEAT_INDUSTRYTILES, uran_mine_tile){
	property{
		substitute			: 0 ;
		land_shape_flags	: bitmask(LSF_ONLY_ON_FLAT_LAND) ;
	}
	graphics{
		default				: sw_uran_mine_gfx_decider ;
	}
}

switch(FEAT_INDUSTRYTILES, SELF, sw_uran_mine_shaft_next_frame, animation_frame){
	0..16 : CB_RESULT_NEXT_FRAME ;
	return 0 ;
}

item(FEAT_INDUSTRYTILES, uran_mine_shaft_tile){
	property{
		substitute			: 0 ;
		land_shape_flags	: bitmask(LSF_ONLY_ON_FLAT_LAND) ;
		animation_info		: [ANIMATION_LOOPING, 16] ;
		animation_speed		: 2 ;
		animation_triggers	: bitmask(ANIM_TRIGGER_INDTILE_TILE_LOOP) ;
	}
	graphics{
		default				: sw_uran_mine_shaft_animation ;
		anim_next_frame		: sw_uran_mine_shaft_next_frame ;
	}
}



//Tile layout

tilelayout tilelayout_uran_mine{
	0,0 : uran_mine_shaft_tile ;
	0,1 : uran_mine_tile ;
	0,2 : uran_mine_tile ;
	
	1,0 : uran_mine_tile ;
	1,1 : uran_mine_tile ;
	1,2 : uran_mine_tile ;
	
	2,0 : uran_mine_tile ;
	2,1 : uran_mine_tile ;
	2,2 : uran_mine_tile ;
}
/*
switch (FEAT_INDUSTRIES, SELF, uran_mine_water_check, water_distance){
	0..64 : CB_RESULT_LOCATION_ALLOW ;
	return string(STR_ERROR_NOT_NEAR_WATER) ;
}*/

switch(FEAT_INDUSTRIES, SELF, sw_uran_monthly_change, transported_last_month_1){
	0 : STORE_PERM(0x00, LOAD_PERM(0x00) - 1) ;
	STORE_PERM(0x00, LOAD_PERM(0x00) + 1) ;
}

switch(FEAT_INDUSTRIES, SELF, sw_uran_monthly_change_check, production_rate_1){
	1..8 : sw_uran_monthly_change ;
	0 : CB_RESULT_IND_PROD_MULTIPLY_BY_4 ;
	CB_RESULT_IND_PROD_NO_CHANGE ;
}

produce(uran_mine_produce_monthly, 0, 0, 0, LOAD_PERM(0x00), 0);

if(nuclear_enabled == 1){
item(FEAT_INDUSTRIES, uran_mine){
	property {
		substitute            : 0x00 ;
		layouts               : [tilelayout_uran_mine] ;
		life_type             : IND_LIFE_TYPE_EXTRACTIVE ;
		fund_cost_multiplier  : 37 ;
		prod_cargo_types      : [cargotype("URAN")] ;
		accept_cargo_types    : [] ;
		prod_multiplier       : [16] ;
		prob_random           : 5 ;
		prob_in_game          : 2 ;
		map_colour            : 255 ;
		spec_flags            : bitmask(IND_FLAG_CAN_CAUSE_SUBSIDENCE) ;
		new_ind_msg           : TTD_STR_NEWS_INDUSTRY_CONSTRUCTION ;
		name                  : string(STR_URANMINE_NAME) ;
		nearby_station_name   : string(STR_URANMINE_STATION_NAME) ;
		//conflicting_ind_types : [0x01] ;
	}
	graphics {
		produce_256_ticks			: uran_mine_produce_monthly ;
		//location_check				: uran_mine_water_check ;
		monthly_prod_change			: sw_uran_monthly_change_check ;
		construction_probability	: sw_nuclear_build_date_check ;
		//random_prod_change    : nucrep_random_prod_change_switch ;
	}
}
}
# 1 "ruktsna.pnml" 2
